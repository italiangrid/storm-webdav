name: Build RPM
on: push
env:
  NIGHTLY_BRANCH: develop
jobs:
  build-rpm:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    strategy:
      fail-fast: false
      matrix:
        os: [almalinux]
        version: [8, 9]
    outputs:
      repo: ${{ steps.info.outputs.repo }}
      version: ${{ steps.info.outputs.version }}
    runs-on: ubuntu-latest
    container: '${{ matrix.os }}:${{ matrix.version }}'
    steps:
      - name: Install dependencies
        run: |
          dnf upgrade -y
          [[ "${{ matrix.version }}" = 8 ]] && dnf module enable -y maven:3.8/common
          dnf install -y git rpmdevtools rpmlint maven-openjdk17
      - name: Setup build tree
        run: |
          echo "%_topdir $(pwd)/rpmbuild" >> ~/.rpmmacros
          rpmdev-setuptree
      - uses: actions/checkout@v4
        with:
          path: 'rpmbuild/BUILD'
          fetch-depth: 0
      - name: Calculate version and repo
        id: info
        run: |
          cd rpmbuild/BUILD
          if [[ ${{ github.ref_type }} = 'tag' ]]; then
            # In case is a tag, get the tag value
            GITHUB_REF=${{ github.ref }}
            TAG_NAME=${GITHUB_REF#refs/tags/}
            # Check if the tag matches v<x>.<y>.<z>(-[0-9A-Za-z-]+)?
            if [[ ${TAG_NAME} =~ ^v([0-9]+\.[0-9]+\.[0-9]+)(-[[:alnum:]-]+)?$ ]]; then
              if [[ -z ${BASH_REMATCH[2]} ]]; then
                REPO='stable'
                VERSION="${BASH_REMATCH[1]}"
                VERSION_POM=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
                if [[ ${VERSION} != ${VERSION_POM} ]]; then
                  echo "Version mismatch between tag (${VERSION}) and POM file (${VERSION_POM})"
                  exit 1
                fi
              else
                # If the tag includes a "-" is a beta, substitute the first "-" with "~" and any other ones with "_"
                REPO='beta'
                PRERELEASE=$(echo ${BASH_REMATCH[2]:1} | sed 's/-/_/g')
                VERSION="${BASH_REMATCH[1]}~${PRERELEASE}"
              fi
            fi
          else
            # Use the output of "git describe" to create version dropping the leading "v" and substituting:
            # - the last "-" with "."
            # - the now last "-" with "^"
            # - the first remaining "-" (if any) with "~"
            # - all possible remaining "-" with "_"
            VERSION=$(git describe --tags --long | sed 's/^v//' | sed -r 's/(.*)-/\1./' | sed -r 's/(.*)-/\1^/' | sed 's/-/~/' | sed 's/-/_/g')
            if [[ ${GITHUB_REF} = "refs/heads/${NIGHTLY_BRANCH}" ]]; then
              REPO='nightly'
            fi
          fi
          echo "REPO=${REPO}" >> "${GITHUB_ENV}"
          echo "repo=${REPO}" >> "${GITHUB_OUTPUT}"
          echo "VERSION=${VERSION}" >> "${GITHUB_ENV}"
          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Version: ${VERSION}"
          echo "Repo: ${REPO:-none}"
      - name: Build RPM
        run: |
          cp rpmbuild/BUILD/storm-webdav.spec rpmbuild/SPECS/storm-webdav.spec
          rpmlint rpmbuild/SPECS/storm-webdav.spec
          rpmbuild --define "base_version ${VERSION}" -ba rpmbuild/SPECS/storm-webdav.spec
      - uses: actions/upload-artifact@v4
        with:
          name: build-rpm-${{ matrix.os }}-${{ matrix.version }}
          path: |
            rpmbuild/RPMS/noarch/*.rpm
      - name: Upload release to repo
        if: env.REPO != ''
        run: |
          curl --fail --user "${{ vars.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" --upload-file rpmbuild/RPMS/noarch/*.rpm https://repo.cloud.cnaf.infn.it/repository/storm-rpm-${REPO}/redhat${{ matrix.version }}/
  create-release:
    needs: build-rpm
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      VERSION: ${{ needs.build-rpm.outputs.version }}
    if: needs.build-rpm.outputs.repo == 'stable'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Create release
        run: |
          # Get from the changelog file only the part related to the tagged release, in particular:
          # - Delete lines up to the one beginning with "## <x>.<y>.<z>" (inclusive)
          # - Delete lines from the next one beginning with "## " until the end of the file
          # - Change all the "### " to "## " to use heading level 2 instead of level 3
          sed -e "1,/^## ${VERSION}/d;/^## /,\$d;s/^### /## /g" CHANGELOG.md > RELEASE-CHANGELOG.md
          gh release create v${VERSION} --title "StoRM WebDAV ${VERSION}" --notes-file RELEASE-CHANGELOG.md build-*/*
